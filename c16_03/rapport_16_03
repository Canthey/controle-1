================================================ test session starts ================================================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/stidsem4/iut/2021/controle/kenzee.abou-stait/c16_03
collected 7 items

test_16_03.py F.FFFFF                                                                                         [100%]

===================================================== FAILURES ======================================================
_______________________________________________ Test1603sute.test_10 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_10>

    def test_10(self):
        try:
>           from .main  import Note

test_16_03.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_10>

    def test_10(self):
        try:
            from .main  import Note
        except:
>          assert False
E          AssertionError: assert False

test_16_03.py:96: AssertionError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
________________________________________________ Test1603sute.test_4 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_4>

    def test_4(self):
        try:
>           from main import moyenne_tuples
E           ImportError: cannot import name 'moyenne_tuples' from 'main' (/home/stidsem4/iut/2021/controle/kenzee.abou-stait/main.py)

test_16_03.py:16: ImportError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_4>

    def test_4(self):
        try:
            from main import moyenne_tuples
        except ImportError:
            try:
>               from .main import moyenne_tuple as moyenne_tuples

test_16_03.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
________________________________________________ Test1603sute.test_5 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_5>

    def test_5(self):
        try:
>           from .main  import Note, onotes

test_16_03.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_5>

    def test_5(self):
        try:
            from .main  import Note, onotes
        except:
>           assert False
E           AssertionError: assert False

test_16_03.py:35: AssertionError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
________________________________________________ Test1603sute.test_6 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_6>

    def test_6(self):
>       from .main import Note, onotes

test_16_03.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
________________________________________________ Test1603sute.test_8 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_8>

    def test_8(self):
        try:
>           from .main import Note

test_16_03.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
________________________________________________ Test1603sute.test_9 ________________________________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_9>

    def test_9(self):
        try:
>           from .main  import Note

test_16_03.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    print(notes)
    
    # question 4 :
    # a/ calculez la moyenne de eleve1 :
    
    
    moyenne = sum(note[2] for note in notes)/len(notes)
    print(moyenne)
    
    
    notes =notes[0:5]
    moyenne_elev1 = sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1)
    
    # b/ calculez la moyenne de eleve1 en maths
    notes = [note1, note3, note6]
    
    moyenne_elev1_maths =sum(note[2] for note in notes)/len(notes)
    print(moyenne_elev1_maths)
    
    # c/ Créer une fonction "moyenne_tuples" qui calcule la moyenne de d'un élève dans une matière.
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    class Note:
      def __init__(self, eleve, matiere, valeur): #La méthode pour créer un objet
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    def afficher(self):
        print('eleve', self.eleve, 'matiere', self.matiere, 'note', self.valeur)
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
>   Note.afficher(onote)
E   AttributeError: type object 'Note' has no attribute 'afficher'

main.py:50: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_9>

    def test_9(self):
        try:
            from .main  import Note
        except:
>          assert False
E          AssertionError: assert False

test_16_03.py:89: AssertionError
----------------------------------------------- Captured stdout call ------------------------------------------------
[('eleve1', 'math', 13), ('eleve1', 'physique', 15), ('eleve1', 'math', 13), ('eleve1', 'eco', 12), ('eleve1', 'eco', 13), ('eleve1', 'math', 12), ('eleve2', 'math', 13), ('eleve2', 'math', 14)]
13.125
13.2
12.666666666666666
eleve1
maths
13
============================================== short test summary info ==============================================
FAILED test_16_03.py::Test1603sute::test_10 - AssertionError: assert False
FAILED test_16_03.py::Test1603sute::test_4 - AttributeError: type object 'Note' has no attribute 'afficher'
FAILED test_16_03.py::Test1603sute::test_5 - AssertionError: assert False
FAILED test_16_03.py::Test1603sute::test_6 - AttributeError: type object 'Note' has no attribute 'afficher'
FAILED test_16_03.py::Test1603sute::test_8 - AttributeError: type object 'Note' has no attribute 'afficher'
FAILED test_16_03.py::Test1603sute::test_9 - AssertionError: assert False
============================================ 6 failed, 1 passed in 0.09s ============================================
